/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SecurePaste {
  export type PasteStruct = {
    id: BytesLike;
    timestamp: BigNumberish;
    title: string;
    ipfsHash: string;
    syntax: string;
  };

  export type PasteStructOutput = [
    id: string,
    timestamp: bigint,
    title: string,
    ipfsHash: string,
    syntax: string
  ] & {
    id: string;
    timestamp: bigint;
    title: string;
    ipfsHash: string;
    syntax: string;
  };
}

export interface SecurePasteInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPaste"
      | "deletePaste"
      | "getAllPaste"
      | "getPaste"
      | "getPastes"
      | "getTotalOwnedPasteCount"
      | "owner"
      | "renounceOwnership"
      | "setNewPasteCooldown"
      | "setUserPasteLimit"
      | "transferOwnership"
      | "transferPasteOwnership"
      | "updatePaste"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NewPaste"
      | "NewPasteCooldownUpdated"
      | "OwnershipTransferred"
      | "PasteDeleted"
      | "PasteOwnershipTransferred"
      | "PasteUpdated"
      | "UserPasteLimitUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createPaste",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePaste",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPaste",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPaste", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getPastes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOwnedPasteCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNewPasteCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserPasteLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPasteOwnership",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaste",
    values: [BytesLike, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPaste",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePaste",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPaste",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPaste", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPastes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOwnedPasteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewPasteCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserPasteLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPasteOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaste",
    data: BytesLike
  ): Result;
}

export namespace NewPasteEvent {
  export type InputTuple = [id: BytesLike, sender: AddressLike];
  export type OutputTuple = [id: string, sender: string];
  export interface OutputObject {
    id: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPasteCooldownUpdatedEvent {
  export type InputTuple = [oldTime: BigNumberish, newTime: BigNumberish];
  export type OutputTuple = [oldTime: bigint, newTime: bigint];
  export interface OutputObject {
    oldTime: bigint;
    newTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PasteDeletedEvent {
  export type InputTuple = [id: BytesLike, sender: AddressLike];
  export type OutputTuple = [id: string, sender: string];
  export interface OutputObject {
    id: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PasteOwnershipTransferredEvent {
  export type InputTuple = [
    id: BytesLike,
    sender: AddressLike,
    newOwner: AddressLike
  ];
  export type OutputTuple = [id: string, sender: string, newOwner: string];
  export interface OutputObject {
    id: string;
    sender: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PasteUpdatedEvent {
  export type InputTuple = [id: BytesLike, sender: AddressLike];
  export type OutputTuple = [id: string, sender: string];
  export interface OutputObject {
    id: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserPasteLimitUpdatedEvent {
  export type InputTuple = [oldLimit: BigNumberish, newLimit: BigNumberish];
  export type OutputTuple = [oldLimit: bigint, newLimit: bigint];
  export interface OutputObject {
    oldLimit: bigint;
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SecurePaste extends BaseContract {
  connect(runner?: ContractRunner | null): SecurePaste;
  waitForDeployment(): Promise<this>;

  interface: SecurePasteInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPaste: TypedContractMethod<
    [
      title: string,
      ipfsHash: string,
      syntax: string,
      currentTimeSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deletePaste: TypedContractMethod<[id: BytesLike], [void], "nonpayable">;

  getAllPaste: TypedContractMethod<
    [],
    [SecurePaste.PasteStructOutput[]],
    "view"
  >;

  getPaste: TypedContractMethod<
    [id: BytesLike],
    [SecurePaste.PasteStructOutput],
    "view"
  >;

  getPastes: TypedContractMethod<
    [count: BigNumberish, skip: BigNumberish],
    [SecurePaste.PasteStructOutput[]],
    "view"
  >;

  getTotalOwnedPasteCount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setNewPasteCooldown: TypedContractMethod<
    [newTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUserPasteLimit: TypedContractMethod<
    [newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferPasteOwnership: TypedContractMethod<
    [id: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePaste: TypedContractMethod<
    [id: BytesLike, title: string, ipfsHash: string, syntax: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPaste"
  ): TypedContractMethod<
    [
      title: string,
      ipfsHash: string,
      syntax: string,
      currentTimeSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deletePaste"
  ): TypedContractMethod<[id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllPaste"
  ): TypedContractMethod<[], [SecurePaste.PasteStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPaste"
  ): TypedContractMethod<
    [id: BytesLike],
    [SecurePaste.PasteStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPastes"
  ): TypedContractMethod<
    [count: BigNumberish, skip: BigNumberish],
    [SecurePaste.PasteStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalOwnedPasteCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNewPasteCooldown"
  ): TypedContractMethod<[newTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserPasteLimit"
  ): TypedContractMethod<[newLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferPasteOwnership"
  ): TypedContractMethod<
    [id: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePaste"
  ): TypedContractMethod<
    [id: BytesLike, title: string, ipfsHash: string, syntax: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NewPaste"
  ): TypedContractEvent<
    NewPasteEvent.InputTuple,
    NewPasteEvent.OutputTuple,
    NewPasteEvent.OutputObject
  >;
  getEvent(
    key: "NewPasteCooldownUpdated"
  ): TypedContractEvent<
    NewPasteCooldownUpdatedEvent.InputTuple,
    NewPasteCooldownUpdatedEvent.OutputTuple,
    NewPasteCooldownUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PasteDeleted"
  ): TypedContractEvent<
    PasteDeletedEvent.InputTuple,
    PasteDeletedEvent.OutputTuple,
    PasteDeletedEvent.OutputObject
  >;
  getEvent(
    key: "PasteOwnershipTransferred"
  ): TypedContractEvent<
    PasteOwnershipTransferredEvent.InputTuple,
    PasteOwnershipTransferredEvent.OutputTuple,
    PasteOwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PasteUpdated"
  ): TypedContractEvent<
    PasteUpdatedEvent.InputTuple,
    PasteUpdatedEvent.OutputTuple,
    PasteUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserPasteLimitUpdated"
  ): TypedContractEvent<
    UserPasteLimitUpdatedEvent.InputTuple,
    UserPasteLimitUpdatedEvent.OutputTuple,
    UserPasteLimitUpdatedEvent.OutputObject
  >;

  filters: {
    "NewPaste(bytes32,address)": TypedContractEvent<
      NewPasteEvent.InputTuple,
      NewPasteEvent.OutputTuple,
      NewPasteEvent.OutputObject
    >;
    NewPaste: TypedContractEvent<
      NewPasteEvent.InputTuple,
      NewPasteEvent.OutputTuple,
      NewPasteEvent.OutputObject
    >;

    "NewPasteCooldownUpdated(uint256,uint256)": TypedContractEvent<
      NewPasteCooldownUpdatedEvent.InputTuple,
      NewPasteCooldownUpdatedEvent.OutputTuple,
      NewPasteCooldownUpdatedEvent.OutputObject
    >;
    NewPasteCooldownUpdated: TypedContractEvent<
      NewPasteCooldownUpdatedEvent.InputTuple,
      NewPasteCooldownUpdatedEvent.OutputTuple,
      NewPasteCooldownUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PasteDeleted(bytes32,address)": TypedContractEvent<
      PasteDeletedEvent.InputTuple,
      PasteDeletedEvent.OutputTuple,
      PasteDeletedEvent.OutputObject
    >;
    PasteDeleted: TypedContractEvent<
      PasteDeletedEvent.InputTuple,
      PasteDeletedEvent.OutputTuple,
      PasteDeletedEvent.OutputObject
    >;

    "PasteOwnershipTransferred(bytes32,address,address)": TypedContractEvent<
      PasteOwnershipTransferredEvent.InputTuple,
      PasteOwnershipTransferredEvent.OutputTuple,
      PasteOwnershipTransferredEvent.OutputObject
    >;
    PasteOwnershipTransferred: TypedContractEvent<
      PasteOwnershipTransferredEvent.InputTuple,
      PasteOwnershipTransferredEvent.OutputTuple,
      PasteOwnershipTransferredEvent.OutputObject
    >;

    "PasteUpdated(bytes32,address)": TypedContractEvent<
      PasteUpdatedEvent.InputTuple,
      PasteUpdatedEvent.OutputTuple,
      PasteUpdatedEvent.OutputObject
    >;
    PasteUpdated: TypedContractEvent<
      PasteUpdatedEvent.InputTuple,
      PasteUpdatedEvent.OutputTuple,
      PasteUpdatedEvent.OutputObject
    >;

    "UserPasteLimitUpdated(uint256,uint256)": TypedContractEvent<
      UserPasteLimitUpdatedEvent.InputTuple,
      UserPasteLimitUpdatedEvent.OutputTuple,
      UserPasteLimitUpdatedEvent.OutputObject
    >;
    UserPasteLimitUpdated: TypedContractEvent<
      UserPasteLimitUpdatedEvent.InputTuple,
      UserPasteLimitUpdatedEvent.OutputTuple,
      UserPasteLimitUpdatedEvent.OutputObject
    >;
  };
}
