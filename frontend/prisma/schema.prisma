generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           String        @id
  name         String
  bio          String?
  avatar       String?
  verified     Boolean       @default(false)
  createdAt    DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(3)
  pastes       Paste[]
  comments     Comment[]
  commentLikes CommentLike[]
  pasteLikes   PasteLike[]
}

model Paste {
  id           String      @id @default(uuid())
  title        String
  bodyOverview String
  bodyUrl      String
  syntax       String
  tags         String[]
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime    @updatedAt @db.Timestamptz(3)
  comments     Comment[]
  likes        PasteLike[]
}

model PasteLike {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  paste   Paste  @relation(fields: [pasteId], references: [id], onDelete: Cascade)
  userId  String
  pasteId String

  @@id([userId, pasteId])
}

model Comment {
  id        String        @id @default(uuid())
  message   String
  createdAt DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt DateTime      @updatedAt @db.Timestamptz(3)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  paste     Paste         @relation(fields: [pasteId], references: [id], onDelete: Cascade)
  pasteId   String
  parent    Comment?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  children  Comment[]     @relation("ParentChild")
  likes     CommentLike[]
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@id([userId, commentId])
}
